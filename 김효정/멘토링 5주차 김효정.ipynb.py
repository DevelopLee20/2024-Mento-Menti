{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1th_IOzweK4Q9J3lzVTnJqaLA5EC7DPTD","authorship_tag":"ABX9TyN1GjSETm0E5ih6HbQS07EU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jqpsFsBoUwak","executionInfo":{"status":"ok","timestamp":1720678338782,"user_tz":-540,"elapsed":334,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"a484b103-0df1-4fda-a471-d5fcfb0a2e07"},"outputs":[{"output_type":"stream","name":"stdout","text":["TensorFlow version :  2.15.0\n"]}],"source":["#텐서플로우 종속성 추가\n","\n","import tensorflow as tf\n","print(\"TensorFlow version : \", tf.__version__)"]},{"cell_type":"code","source":["# MNIST 데이터셋 불러오기\n","\n","mnist = tf.keras.datasets.mnist\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","x_train, x_test, y_train/255.0, y_test/255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gS-i5-75VEVH","executionInfo":{"status":"ok","timestamp":1720678339583,"user_tz":-540,"elapsed":443,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"67841f52-2461-4a14-e9b8-d48f9b7241f0"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        ...,\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8),\n"," array([[[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        ...,\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]],\n"," \n","        [[0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         ...,\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0],\n","         [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8),\n"," array([0.01960784, 0.        , 0.01568627, ..., 0.01960784, 0.02352941,\n","        0.03137255]),\n"," array([0.02745098, 0.00784314, 0.00392157, ..., 0.01568627, 0.01960784,\n","        0.02352941]))"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["x_train.shape, x_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xPu-69PXVF0-","executionInfo":{"status":"ok","timestamp":1720678339583,"user_tz":-540,"elapsed":7,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"ce80a333-8234-43d4-a432-fcf2621eaf88"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((60000, 28, 28), (10000, 28, 28))"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["#모델 구조 생성\n","\n","model = tf.keras.models.Sequential([\n","    tf.keras.layers.Flatten(input_shape = (28, 28)),  # 입력층, flatten = 일자로 쭉 펴줌\n","    tf.keras.layers.Dense(128, activation = 'relu'),  # 가중치 계산, relu = 0이하는 0, 이상은 그대로\n","    tf.keras.layers.Dropout(0.2),     # 20퍼센트 무시하겠다. 걍 몰라도 된대요\n","    tf.keras.layers.Dense(10, activation = 'softmax') # softmax = 확률 계산, 0~1로 표현\n","])\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JRc5gWHTVGqA","executionInfo":{"status":"ok","timestamp":1720678339583,"user_tz":-540,"elapsed":4,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"31ae6bf3-3b8b-481c-e9c1-83798d7decc8"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," flatten_2 (Flatten)         (None, 784)               0         \n","                                                                 \n"," dense_4 (Dense)             (None, 128)               100480    \n","                                                                 \n"," dropout_2 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_5 (Dense)             (None, 10)                1290      \n","                                                                 \n","=================================================================\n","Total params: 101770 (397.54 KB)\n","Trainable params: 101770 (397.54 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["#모델로 값 예측 해보기\n","\n","predictions = model(x_train[:1]).numpy()\n","predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pVWh62XGVHaM","executionInfo":{"status":"ok","timestamp":1720678339583,"user_tz":-540,"elapsed":3,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"2c7ef54d-4277-4a8a-e256-761a11c08b8c"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.0000000e+00, 0.0000000e+00, 2.6924294e-08, 1.0000000e+00,\n","        0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00,\n","        0.0000000e+00, 0.0000000e+00]], dtype=float32)"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["#오차 함수 지정하기\n","\n","loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n","\n","loss_fn(y_train[:1], predictions).numpy()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X5vYMJwAV5-j","executionInfo":{"status":"ok","timestamp":1720678339583,"user_tz":-540,"elapsed":2,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"4e800e8a-c751-49c0-aeb3-ff8740a7893e"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.4611502"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#모델 컴파일 옵션 설정하기\n","\n","model.compile(optimizer='adam',\n","              loss=loss_fn,\n","              metrics=['accuracy'])"],"metadata":{"id":"lW4IbxtEZnYW","executionInfo":{"status":"ok","timestamp":1720678339583,"user_tz":-540,"elapsed":2,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["#모델 학습시키기\n","\n","model.fit(x_train, y_train, epochs=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ynvMEpwZ797","executionInfo":{"status":"ok","timestamp":1720678365692,"user_tz":-540,"elapsed":26110,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"833cc2e3-380b-4b6e-b91f-54224b7f6dcc"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1875/1875 [==============================] - 5s 3ms/step - loss: 2.6239 - accuracy: 0.7513\n","Epoch 2/5\n","1875/1875 [==============================] - 6s 3ms/step - loss: 0.5960 - accuracy: 0.8459\n","Epoch 3/5\n","1875/1875 [==============================] - 5s 2ms/step - loss: 0.4907 - accuracy: 0.8724\n","Epoch 4/5\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.4302 - accuracy: 0.8885\n","Epoch 5/5\n","1875/1875 [==============================] - 5s 3ms/step - loss: 0.4010 - accuracy: 0.8960\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7974b28b0250>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["#학습된 모델로 테스트 데이터 넣어서 검증해보기\n","\n","model.evaluate(x_test,  y_test, verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fhksAOXpagnW","executionInfo":{"status":"ok","timestamp":1720678366237,"user_tz":-540,"elapsed":547,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"a6c97db6-fb11-4d20-a5ba-c69a814b87d5"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 - 1s - loss: 0.2817 - accuracy: 0.9314 - 651ms/epoch - 2ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.2817154824733734, 0.9314000010490417]"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["path = \"/content/drive/MyDrive/0-9\""],"metadata":{"id":"LXs_ZckhatDO","executionInfo":{"status":"ok","timestamp":1720679347425,"user_tz":-540,"elapsed":345,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import tensorflow as tf"],"metadata":{"id":"49Y2JD0-ezGc","executionInfo":{"status":"ok","timestamp":1720679504827,"user_tz":-540,"elapsed":473,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# 데이터 불러오기\n","dataset = tf.keras.utils.image_dataset_from_directory(path,\n","                                                      shuffle=True,\n","                                                        batch_size=10,\n","                                                        image_size=(160, 160))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JVqQzdX4fZfc","executionInfo":{"status":"ok","timestamp":1720679539493,"user_tz":-540,"elapsed":1904,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"3c3a70d6-bfb5-463c-d094-35d25da636ba"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 426 files belonging to 10 classes.\n"]}]},{"cell_type":"code","source":["# 라벨 확인하기\n","class_names = dataset.class_names\n","\n","plt.figure(figsize=(10, 10))\n","for images, labels in dataset.take(1):\n","    for i in range(9):\n","        ax = plt.subplot(3, 3, i + 1)\n","        plt.imshow(images[i].numpy().astype(\"uint8\"))\n","        plt.title(class_names[labels[i]])\n","        plt.axis(\"off\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":677},"id":"G2Jh9XRufa71","executionInfo":{"status":"ok","timestamp":1720679576937,"user_tz":-540,"elapsed":20187,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"f514a8e4-2635-4c23-e344-504365f7baa2"},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 9 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 배치 크기로 나누기\n","batches = tf.data.experimental.cardinality(dataset)\n","train_dataset = dataset.take(batches * 4 // 5)\n","test_dataset = dataset.skip(batches * 4 // 5)\n","\n","print(tf.data.experimental.cardinality(train_dataset))\n","print(tf.data.experimental.cardinality(test_dataset))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EIpF7_5CfmRz","executionInfo":{"status":"ok","timestamp":1720679730083,"user_tz":-540,"elapsed":420,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"0b2854ac-f9b6-48de-e042-4a0fd1340cf7"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(34, shape=(), dtype=int64)\n","tf.Tensor(9, shape=(), dtype=int64)\n"]}]},{"cell_type":"code","source":["# 버퍼링된 프리페치로 I/O 차단 없이 디스크에서 이미지 로드(성능향상)\n","AUTOTUNE = tf.data.AUTOTUNE\n","\n","train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)\n","test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)"],"metadata":{"id":"iD-RB8CCfpAg","executionInfo":{"status":"ok","timestamp":1720679811370,"user_tz":-540,"elapsed":417,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# 데이터 증강 사용\n","data_augmentation = tf.keras.Sequential([\n","    tf.keras.layers.RandomFlip('horizontal'),\n","    tf.keras.layers.RandomRotation(0.2),\n","])\n","\n","for image, _ in train_dataset.take(1):\n","    plt.figure(figsize=(10, 10))\n","    first_image = image[0]\n","\n","    for i in range(9):\n","        ax = plt.subplot(3, 3, i + 1)\n","        augmented_image = data_augmentation(tf.expand_dims(first_image, 0))\n","        plt.imshow(augmented_image[0] / 255)\n","        plt.axis('off')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":659},"id":"QMTJbNXXfqG7","executionInfo":{"status":"ok","timestamp":1720679868053,"user_tz":-540,"elapsed":2304,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"a0609057-5c94-48b1-e38d-c4ec53cb0479"},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 9 Axes>"],"image/png":"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AAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAA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AAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAAADAKCIDAAAAgFFEBgAAAACjiAwAAAAARhEZAAAAAIwiMgAAAAAYRWQAAAAAMIrIAAAAAGAUkQEAy5Rt27Jt2+kx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\n"},"metadata":{}}]},{"cell_type":"code","source":["# 픽셀값 재조정 -1 ~ 1 의 값, 모델에 맞게 사용\n","preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input\n","rescale = tf.keras.layers.Rescaling(1./127.5, offset=-1)"],"metadata":{"id":"oVKdV7lzfrQC","executionInfo":{"status":"ok","timestamp":1720679935379,"user_tz":-540,"elapsed":518,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# 전이학습의 기본 모델 설정\n","# Create the base model from the pre-trained model MobileNet V2\n","IMG_SHAPE = (160, 160) + (3,)\n","base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,\n","                                               include_top=False,\n","                                               weights='imagenet')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tH4qLKqzfsim","executionInfo":{"status":"ok","timestamp":1720679976227,"user_tz":-540,"elapsed":1816,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"4f626d94-c863-4bf0-8dea-96ed1942e33d"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_160_no_top.h5\n","9406464/9406464 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"code","source":["base_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uMepFUiqhdHa","executionInfo":{"status":"ok","timestamp":1720680112168,"user_tz":-540,"elapsed":1997,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"1905877e-2aef-4ff0-b78e-cfd8a7bf78eb"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"mobilenetv2_1.00_160\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_1 (InputLayer)        [(None, 160, 160, 3)]        0         []                            \n","                                                                                                  \n"," Conv1 (Conv2D)              (None, 80, 80, 32)           864       ['input_1[0][0]']             \n","                                                                                                  \n"," bn_Conv1 (BatchNormalizati  (None, 80, 80, 32)           128       ['Conv1[0][0]']               \n"," on)                                                                                              \n","                                                                                                  \n"," Conv1_relu (ReLU)           (None, 80, 80, 32)           0         ['bn_Conv1[0][0]']            \n","                                                                                                  \n"," expanded_conv_depthwise (D  (None, 80, 80, 32)           288       ['Conv1_relu[0][0]']          \n"," epthwiseConv2D)                                                                                  \n","                                                                                                  \n"," expanded_conv_depthwise_BN  (None, 80, 80, 32)           128       ['expanded_conv_depthwise[0][0\n","  (BatchNormalization)                                              ]']                           \n","                                                                                                  \n"," expanded_conv_depthwise_re  (None, 80, 80, 32)           0         ['expanded_conv_depthwise_BN[0\n"," lu (ReLU)                                                          ][0]']                        \n","                                                                                                  \n"," expanded_conv_project (Con  (None, 80, 80, 16)           512       ['expanded_conv_depthwise_relu\n"," v2D)                                                               [0][0]']                      \n","                                                                                                  \n"," expanded_conv_project_BN (  (None, 80, 80, 16)           64        ['expanded_conv_project[0][0]'\n"," BatchNormalization)                                                ]                             \n","                                                                                                  \n"," block_1_expand (Conv2D)     (None, 80, 80, 96)           1536      ['expanded_conv_project_BN[0][\n","                                                                    0]']                          \n","                                                                                                  \n"," block_1_expand_BN (BatchNo  (None, 80, 80, 96)           384       ['block_1_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_1_expand_relu (ReLU)  (None, 80, 80, 96)           0         ['block_1_expand_BN[0][0]']   \n","                                                                                                  \n"," block_1_pad (ZeroPadding2D  (None, 81, 81, 96)           0         ['block_1_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_1_depthwise (Depthwi  (None, 40, 40, 96)           864       ['block_1_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_1_depthwise_BN (Batc  (None, 40, 40, 96)           384       ['block_1_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_1_depthwise_relu (Re  (None, 40, 40, 96)           0         ['block_1_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_1_project (Conv2D)    (None, 40, 40, 24)           2304      ['block_1_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_1_project_BN (BatchN  (None, 40, 40, 24)           96        ['block_1_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_2_expand (Conv2D)     (None, 40, 40, 144)          3456      ['block_1_project_BN[0][0]']  \n","                                                                                                  \n"," block_2_expand_BN (BatchNo  (None, 40, 40, 144)          576       ['block_2_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_2_expand_relu (ReLU)  (None, 40, 40, 144)          0         ['block_2_expand_BN[0][0]']   \n","                                                                                                  \n"," block_2_depthwise (Depthwi  (None, 40, 40, 144)          1296      ['block_2_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_2_depthwise_BN (Batc  (None, 40, 40, 144)          576       ['block_2_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_2_depthwise_relu (Re  (None, 40, 40, 144)          0         ['block_2_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_2_project (Conv2D)    (None, 40, 40, 24)           3456      ['block_2_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_2_project_BN (BatchN  (None, 40, 40, 24)           96        ['block_2_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_2_add (Add)           (None, 40, 40, 24)           0         ['block_1_project_BN[0][0]',  \n","                                                                     'block_2_project_BN[0][0]']  \n","                                                                                                  \n"," block_3_expand (Conv2D)     (None, 40, 40, 144)          3456      ['block_2_add[0][0]']         \n","                                                                                                  \n"," block_3_expand_BN (BatchNo  (None, 40, 40, 144)          576       ['block_3_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_3_expand_relu (ReLU)  (None, 40, 40, 144)          0         ['block_3_expand_BN[0][0]']   \n","                                                                                                  \n"," block_3_pad (ZeroPadding2D  (None, 41, 41, 144)          0         ['block_3_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_3_depthwise (Depthwi  (None, 20, 20, 144)          1296      ['block_3_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_3_depthwise_BN (Batc  (None, 20, 20, 144)          576       ['block_3_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_3_depthwise_relu (Re  (None, 20, 20, 144)          0         ['block_3_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_3_project (Conv2D)    (None, 20, 20, 32)           4608      ['block_3_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_3_project_BN (BatchN  (None, 20, 20, 32)           128       ['block_3_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_4_expand (Conv2D)     (None, 20, 20, 192)          6144      ['block_3_project_BN[0][0]']  \n","                                                                                                  \n"," block_4_expand_BN (BatchNo  (None, 20, 20, 192)          768       ['block_4_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_4_expand_relu (ReLU)  (None, 20, 20, 192)          0         ['block_4_expand_BN[0][0]']   \n","                                                                                                  \n"," block_4_depthwise (Depthwi  (None, 20, 20, 192)          1728      ['block_4_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_4_depthwise_BN (Batc  (None, 20, 20, 192)          768       ['block_4_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_4_depthwise_relu (Re  (None, 20, 20, 192)          0         ['block_4_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_4_project (Conv2D)    (None, 20, 20, 32)           6144      ['block_4_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_4_project_BN (BatchN  (None, 20, 20, 32)           128       ['block_4_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_4_add (Add)           (None, 20, 20, 32)           0         ['block_3_project_BN[0][0]',  \n","                                                                     'block_4_project_BN[0][0]']  \n","                                                                                                  \n"," block_5_expand (Conv2D)     (None, 20, 20, 192)          6144      ['block_4_add[0][0]']         \n","                                                                                                  \n"," block_5_expand_BN (BatchNo  (None, 20, 20, 192)          768       ['block_5_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_5_expand_relu (ReLU)  (None, 20, 20, 192)          0         ['block_5_expand_BN[0][0]']   \n","                                                                                                  \n"," block_5_depthwise (Depthwi  (None, 20, 20, 192)          1728      ['block_5_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_5_depthwise_BN (Batc  (None, 20, 20, 192)          768       ['block_5_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_5_depthwise_relu (Re  (None, 20, 20, 192)          0         ['block_5_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_5_project (Conv2D)    (None, 20, 20, 32)           6144      ['block_5_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_5_project_BN (BatchN  (None, 20, 20, 32)           128       ['block_5_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_5_add (Add)           (None, 20, 20, 32)           0         ['block_4_add[0][0]',         \n","                                                                     'block_5_project_BN[0][0]']  \n","                                                                                                  \n"," block_6_expand (Conv2D)     (None, 20, 20, 192)          6144      ['block_5_add[0][0]']         \n","                                                                                                  \n"," block_6_expand_BN (BatchNo  (None, 20, 20, 192)          768       ['block_6_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_6_expand_relu (ReLU)  (None, 20, 20, 192)          0         ['block_6_expand_BN[0][0]']   \n","                                                                                                  \n"," block_6_pad (ZeroPadding2D  (None, 21, 21, 192)          0         ['block_6_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_6_depthwise (Depthwi  (None, 10, 10, 192)          1728      ['block_6_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_6_depthwise_BN (Batc  (None, 10, 10, 192)          768       ['block_6_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_6_depthwise_relu (Re  (None, 10, 10, 192)          0         ['block_6_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_6_project (Conv2D)    (None, 10, 10, 64)           12288     ['block_6_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_6_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_6_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_7_expand (Conv2D)     (None, 10, 10, 384)          24576     ['block_6_project_BN[0][0]']  \n","                                                                                                  \n"," block_7_expand_BN (BatchNo  (None, 10, 10, 384)          1536      ['block_7_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_7_expand_relu (ReLU)  (None, 10, 10, 384)          0         ['block_7_expand_BN[0][0]']   \n","                                                                                                  \n"," block_7_depthwise (Depthwi  (None, 10, 10, 384)          3456      ['block_7_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_7_depthwise_BN (Batc  (None, 10, 10, 384)          1536      ['block_7_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_7_depthwise_relu (Re  (None, 10, 10, 384)          0         ['block_7_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_7_project (Conv2D)    (None, 10, 10, 64)           24576     ['block_7_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_7_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_7_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_7_add (Add)           (None, 10, 10, 64)           0         ['block_6_project_BN[0][0]',  \n","                                                                     'block_7_project_BN[0][0]']  \n","                                                                                                  \n"," block_8_expand (Conv2D)     (None, 10, 10, 384)          24576     ['block_7_add[0][0]']         \n","                                                                                                  \n"," block_8_expand_BN (BatchNo  (None, 10, 10, 384)          1536      ['block_8_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_8_expand_relu (ReLU)  (None, 10, 10, 384)          0         ['block_8_expand_BN[0][0]']   \n","                                                                                                  \n"," block_8_depthwise (Depthwi  (None, 10, 10, 384)          3456      ['block_8_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_8_depthwise_BN (Batc  (None, 10, 10, 384)          1536      ['block_8_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_8_depthwise_relu (Re  (None, 10, 10, 384)          0         ['block_8_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_8_project (Conv2D)    (None, 10, 10, 64)           24576     ['block_8_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_8_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_8_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_8_add (Add)           (None, 10, 10, 64)           0         ['block_7_add[0][0]',         \n","                                                                     'block_8_project_BN[0][0]']  \n","                                                                                                  \n"," block_9_expand (Conv2D)     (None, 10, 10, 384)          24576     ['block_8_add[0][0]']         \n","                                                                                                  \n"," block_9_expand_BN (BatchNo  (None, 10, 10, 384)          1536      ['block_9_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_9_expand_relu (ReLU)  (None, 10, 10, 384)          0         ['block_9_expand_BN[0][0]']   \n","                                                                                                  \n"," block_9_depthwise (Depthwi  (None, 10, 10, 384)          3456      ['block_9_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_9_depthwise_BN (Batc  (None, 10, 10, 384)          1536      ['block_9_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_9_depthwise_relu (Re  (None, 10, 10, 384)          0         ['block_9_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_9_project (Conv2D)    (None, 10, 10, 64)           24576     ['block_9_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_9_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_9_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_9_add (Add)           (None, 10, 10, 64)           0         ['block_8_add[0][0]',         \n","                                                                     'block_9_project_BN[0][0]']  \n","                                                                                                  \n"," block_10_expand (Conv2D)    (None, 10, 10, 384)          24576     ['block_9_add[0][0]']         \n","                                                                                                  \n"," block_10_expand_BN (BatchN  (None, 10, 10, 384)          1536      ['block_10_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_10_expand_relu (ReLU  (None, 10, 10, 384)          0         ['block_10_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_10_depthwise (Depthw  (None, 10, 10, 384)          3456      ['block_10_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_10_depthwise_BN (Bat  (None, 10, 10, 384)          1536      ['block_10_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_10_depthwise_relu (R  (None, 10, 10, 384)          0         ['block_10_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_10_project (Conv2D)   (None, 10, 10, 96)           36864     ['block_10_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_10_project_BN (Batch  (None, 10, 10, 96)           384       ['block_10_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_11_expand (Conv2D)    (None, 10, 10, 576)          55296     ['block_10_project_BN[0][0]'] \n","                                                                                                  \n"," block_11_expand_BN (BatchN  (None, 10, 10, 576)          2304      ['block_11_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_11_expand_relu (ReLU  (None, 10, 10, 576)          0         ['block_11_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_11_depthwise (Depthw  (None, 10, 10, 576)          5184      ['block_11_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_11_depthwise_BN (Bat  (None, 10, 10, 576)          2304      ['block_11_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_11_depthwise_relu (R  (None, 10, 10, 576)          0         ['block_11_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_11_project (Conv2D)   (None, 10, 10, 96)           55296     ['block_11_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_11_project_BN (Batch  (None, 10, 10, 96)           384       ['block_11_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_11_add (Add)          (None, 10, 10, 96)           0         ['block_10_project_BN[0][0]', \n","                                                                     'block_11_project_BN[0][0]'] \n","                                                                                                  \n"," block_12_expand (Conv2D)    (None, 10, 10, 576)          55296     ['block_11_add[0][0]']        \n","                                                                                                  \n"," block_12_expand_BN (BatchN  (None, 10, 10, 576)          2304      ['block_12_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_12_expand_relu (ReLU  (None, 10, 10, 576)          0         ['block_12_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_12_depthwise (Depthw  (None, 10, 10, 576)          5184      ['block_12_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_12_depthwise_BN (Bat  (None, 10, 10, 576)          2304      ['block_12_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_12_depthwise_relu (R  (None, 10, 10, 576)          0         ['block_12_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_12_project (Conv2D)   (None, 10, 10, 96)           55296     ['block_12_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_12_project_BN (Batch  (None, 10, 10, 96)           384       ['block_12_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_12_add (Add)          (None, 10, 10, 96)           0         ['block_11_add[0][0]',        \n","                                                                     'block_12_project_BN[0][0]'] \n","                                                                                                  \n"," block_13_expand (Conv2D)    (None, 10, 10, 576)          55296     ['block_12_add[0][0]']        \n","                                                                                                  \n"," block_13_expand_BN (BatchN  (None, 10, 10, 576)          2304      ['block_13_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_13_expand_relu (ReLU  (None, 10, 10, 576)          0         ['block_13_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_13_pad (ZeroPadding2  (None, 11, 11, 576)          0         ['block_13_expand_relu[0][0]']\n"," D)                                                                                               \n","                                                                                                  \n"," block_13_depthwise (Depthw  (None, 5, 5, 576)            5184      ['block_13_pad[0][0]']        \n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_13_depthwise_BN (Bat  (None, 5, 5, 576)            2304      ['block_13_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_13_depthwise_relu (R  (None, 5, 5, 576)            0         ['block_13_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_13_project (Conv2D)   (None, 5, 5, 160)            92160     ['block_13_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_13_project_BN (Batch  (None, 5, 5, 160)            640       ['block_13_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_14_expand (Conv2D)    (None, 5, 5, 960)            153600    ['block_13_project_BN[0][0]'] \n","                                                                                                  \n"," block_14_expand_BN (BatchN  (None, 5, 5, 960)            3840      ['block_14_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_14_expand_relu (ReLU  (None, 5, 5, 960)            0         ['block_14_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_14_depthwise (Depthw  (None, 5, 5, 960)            8640      ['block_14_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_14_depthwise_BN (Bat  (None, 5, 5, 960)            3840      ['block_14_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_14_depthwise_relu (R  (None, 5, 5, 960)            0         ['block_14_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_14_project (Conv2D)   (None, 5, 5, 160)            153600    ['block_14_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_14_project_BN (Batch  (None, 5, 5, 160)            640       ['block_14_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_14_add (Add)          (None, 5, 5, 160)            0         ['block_13_project_BN[0][0]', \n","                                                                     'block_14_project_BN[0][0]'] \n","                                                                                                  \n"," block_15_expand (Conv2D)    (None, 5, 5, 960)            153600    ['block_14_add[0][0]']        \n","                                                                                                  \n"," block_15_expand_BN (BatchN  (None, 5, 5, 960)            3840      ['block_15_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_15_expand_relu (ReLU  (None, 5, 5, 960)            0         ['block_15_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_15_depthwise (Depthw  (None, 5, 5, 960)            8640      ['block_15_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_15_depthwise_BN (Bat  (None, 5, 5, 960)            3840      ['block_15_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_15_depthwise_relu (R  (None, 5, 5, 960)            0         ['block_15_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_15_project (Conv2D)   (None, 5, 5, 160)            153600    ['block_15_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_15_project_BN (Batch  (None, 5, 5, 160)            640       ['block_15_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_15_add (Add)          (None, 5, 5, 160)            0         ['block_14_add[0][0]',        \n","                                                                     'block_15_project_BN[0][0]'] \n","                                                                                                  \n"," block_16_expand (Conv2D)    (None, 5, 5, 960)            153600    ['block_15_add[0][0]']        \n","                                                                                                  \n"," block_16_expand_BN (BatchN  (None, 5, 5, 960)            3840      ['block_16_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_16_expand_relu (ReLU  (None, 5, 5, 960)            0         ['block_16_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_16_depthwise (Depthw  (None, 5, 5, 960)            8640      ['block_16_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_16_depthwise_BN (Bat  (None, 5, 5, 960)            3840      ['block_16_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_16_depthwise_relu (R  (None, 5, 5, 960)            0         ['block_16_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_16_project (Conv2D)   (None, 5, 5, 320)            307200    ['block_16_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_16_project_BN (Batch  (None, 5, 5, 320)            1280      ['block_16_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," Conv_1 (Conv2D)             (None, 5, 5, 1280)           409600    ['block_16_project_BN[0][0]'] \n","                                                                                                  \n"," Conv_1_bn (BatchNormalizat  (None, 5, 5, 1280)           5120      ['Conv_1[0][0]']              \n"," ion)                                                                                             \n","                                                                                                  \n"," out_relu (ReLU)             (None, 5, 5, 1280)           0         ['Conv_1_bn[0][0]']           \n","                                                                                                  \n","==================================================================================================\n","Total params: 2257984 (8.61 MB)\n","Trainable params: 2223872 (8.48 MB)\n","Non-trainable params: 34112 (133.25 KB)\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# 베이스 모델로의 변환 확인\n","image_batch, label_batch = next(iter(train_dataset))\n","feature_batch = base_model(image_batch)\n","print(feature_batch.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8cWfY1f7fuaI","executionInfo":{"status":"ok","timestamp":1720680113294,"user_tz":-540,"elapsed":737,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"fd289376-fe31-42fa-e90c-3a365631791f"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 5, 5, 1280)\n"]}]},{"cell_type":"code","source":["# 베이스 모델 학습 하지 않음\n","base_model.trainable = False"],"metadata":{"id":"8GDvWYAMfv9o","executionInfo":{"status":"ok","timestamp":1720680191399,"user_tz":-540,"elapsed":3,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["# 베이스 모델 구조 확인\n","# Let's take a look at the base model architecture\n","base_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LK_l_LQCfxGu","executionInfo":{"status":"ok","timestamp":1720680204367,"user_tz":-540,"elapsed":1626,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"70cfb4cb-ded8-4003-df72-259ffa88e877"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"mobilenetv2_1.00_160\"\n","__________________________________________________________________________________________________\n"," Layer (type)                Output Shape                 Param #   Connected to                  \n","==================================================================================================\n"," input_1 (InputLayer)        [(None, 160, 160, 3)]        0         []                            \n","                                                                                                  \n"," Conv1 (Conv2D)              (None, 80, 80, 32)           864       ['input_1[0][0]']             \n","                                                                                                  \n"," bn_Conv1 (BatchNormalizati  (None, 80, 80, 32)           128       ['Conv1[0][0]']               \n"," on)                                                                                              \n","                                                                                                  \n"," Conv1_relu (ReLU)           (None, 80, 80, 32)           0         ['bn_Conv1[0][0]']            \n","                                                                                                  \n"," expanded_conv_depthwise (D  (None, 80, 80, 32)           288       ['Conv1_relu[0][0]']          \n"," epthwiseConv2D)                                                                                  \n","                                                                                                  \n"," expanded_conv_depthwise_BN  (None, 80, 80, 32)           128       ['expanded_conv_depthwise[0][0\n","  (BatchNormalization)                                              ]']                           \n","                                                                                                  \n"," expanded_conv_depthwise_re  (None, 80, 80, 32)           0         ['expanded_conv_depthwise_BN[0\n"," lu (ReLU)                                                          ][0]']                        \n","                                                                                                  \n"," expanded_conv_project (Con  (None, 80, 80, 16)           512       ['expanded_conv_depthwise_relu\n"," v2D)                                                               [0][0]']                      \n","                                                                                                  \n"," expanded_conv_project_BN (  (None, 80, 80, 16)           64        ['expanded_conv_project[0][0]'\n"," BatchNormalization)                                                ]                             \n","                                                                                                  \n"," block_1_expand (Conv2D)     (None, 80, 80, 96)           1536      ['expanded_conv_project_BN[0][\n","                                                                    0]']                          \n","                                                                                                  \n"," block_1_expand_BN (BatchNo  (None, 80, 80, 96)           384       ['block_1_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_1_expand_relu (ReLU)  (None, 80, 80, 96)           0         ['block_1_expand_BN[0][0]']   \n","                                                                                                  \n"," block_1_pad (ZeroPadding2D  (None, 81, 81, 96)           0         ['block_1_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_1_depthwise (Depthwi  (None, 40, 40, 96)           864       ['block_1_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_1_depthwise_BN (Batc  (None, 40, 40, 96)           384       ['block_1_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_1_depthwise_relu (Re  (None, 40, 40, 96)           0         ['block_1_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_1_project (Conv2D)    (None, 40, 40, 24)           2304      ['block_1_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_1_project_BN (BatchN  (None, 40, 40, 24)           96        ['block_1_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_2_expand (Conv2D)     (None, 40, 40, 144)          3456      ['block_1_project_BN[0][0]']  \n","                                                                                                  \n"," block_2_expand_BN (BatchNo  (None, 40, 40, 144)          576       ['block_2_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_2_expand_relu (ReLU)  (None, 40, 40, 144)          0         ['block_2_expand_BN[0][0]']   \n","                                                                                                  \n"," block_2_depthwise (Depthwi  (None, 40, 40, 144)          1296      ['block_2_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_2_depthwise_BN (Batc  (None, 40, 40, 144)          576       ['block_2_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_2_depthwise_relu (Re  (None, 40, 40, 144)          0         ['block_2_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_2_project (Conv2D)    (None, 40, 40, 24)           3456      ['block_2_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_2_project_BN (BatchN  (None, 40, 40, 24)           96        ['block_2_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_2_add (Add)           (None, 40, 40, 24)           0         ['block_1_project_BN[0][0]',  \n","                                                                     'block_2_project_BN[0][0]']  \n","                                                                                                  \n"," block_3_expand (Conv2D)     (None, 40, 40, 144)          3456      ['block_2_add[0][0]']         \n","                                                                                                  \n"," block_3_expand_BN (BatchNo  (None, 40, 40, 144)          576       ['block_3_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_3_expand_relu (ReLU)  (None, 40, 40, 144)          0         ['block_3_expand_BN[0][0]']   \n","                                                                                                  \n"," block_3_pad (ZeroPadding2D  (None, 41, 41, 144)          0         ['block_3_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_3_depthwise (Depthwi  (None, 20, 20, 144)          1296      ['block_3_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_3_depthwise_BN (Batc  (None, 20, 20, 144)          576       ['block_3_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_3_depthwise_relu (Re  (None, 20, 20, 144)          0         ['block_3_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_3_project (Conv2D)    (None, 20, 20, 32)           4608      ['block_3_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_3_project_BN (BatchN  (None, 20, 20, 32)           128       ['block_3_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_4_expand (Conv2D)     (None, 20, 20, 192)          6144      ['block_3_project_BN[0][0]']  \n","                                                                                                  \n"," block_4_expand_BN (BatchNo  (None, 20, 20, 192)          768       ['block_4_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_4_expand_relu (ReLU)  (None, 20, 20, 192)          0         ['block_4_expand_BN[0][0]']   \n","                                                                                                  \n"," block_4_depthwise (Depthwi  (None, 20, 20, 192)          1728      ['block_4_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_4_depthwise_BN (Batc  (None, 20, 20, 192)          768       ['block_4_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_4_depthwise_relu (Re  (None, 20, 20, 192)          0         ['block_4_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_4_project (Conv2D)    (None, 20, 20, 32)           6144      ['block_4_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_4_project_BN (BatchN  (None, 20, 20, 32)           128       ['block_4_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_4_add (Add)           (None, 20, 20, 32)           0         ['block_3_project_BN[0][0]',  \n","                                                                     'block_4_project_BN[0][0]']  \n","                                                                                                  \n"," block_5_expand (Conv2D)     (None, 20, 20, 192)          6144      ['block_4_add[0][0]']         \n","                                                                                                  \n"," block_5_expand_BN (BatchNo  (None, 20, 20, 192)          768       ['block_5_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_5_expand_relu (ReLU)  (None, 20, 20, 192)          0         ['block_5_expand_BN[0][0]']   \n","                                                                                                  \n"," block_5_depthwise (Depthwi  (None, 20, 20, 192)          1728      ['block_5_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_5_depthwise_BN (Batc  (None, 20, 20, 192)          768       ['block_5_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_5_depthwise_relu (Re  (None, 20, 20, 192)          0         ['block_5_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_5_project (Conv2D)    (None, 20, 20, 32)           6144      ['block_5_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_5_project_BN (BatchN  (None, 20, 20, 32)           128       ['block_5_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_5_add (Add)           (None, 20, 20, 32)           0         ['block_4_add[0][0]',         \n","                                                                     'block_5_project_BN[0][0]']  \n","                                                                                                  \n"," block_6_expand (Conv2D)     (None, 20, 20, 192)          6144      ['block_5_add[0][0]']         \n","                                                                                                  \n"," block_6_expand_BN (BatchNo  (None, 20, 20, 192)          768       ['block_6_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_6_expand_relu (ReLU)  (None, 20, 20, 192)          0         ['block_6_expand_BN[0][0]']   \n","                                                                                                  \n"," block_6_pad (ZeroPadding2D  (None, 21, 21, 192)          0         ['block_6_expand_relu[0][0]'] \n"," )                                                                                                \n","                                                                                                  \n"," block_6_depthwise (Depthwi  (None, 10, 10, 192)          1728      ['block_6_pad[0][0]']         \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_6_depthwise_BN (Batc  (None, 10, 10, 192)          768       ['block_6_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_6_depthwise_relu (Re  (None, 10, 10, 192)          0         ['block_6_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_6_project (Conv2D)    (None, 10, 10, 64)           12288     ['block_6_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_6_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_6_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_7_expand (Conv2D)     (None, 10, 10, 384)          24576     ['block_6_project_BN[0][0]']  \n","                                                                                                  \n"," block_7_expand_BN (BatchNo  (None, 10, 10, 384)          1536      ['block_7_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_7_expand_relu (ReLU)  (None, 10, 10, 384)          0         ['block_7_expand_BN[0][0]']   \n","                                                                                                  \n"," block_7_depthwise (Depthwi  (None, 10, 10, 384)          3456      ['block_7_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_7_depthwise_BN (Batc  (None, 10, 10, 384)          1536      ['block_7_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_7_depthwise_relu (Re  (None, 10, 10, 384)          0         ['block_7_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_7_project (Conv2D)    (None, 10, 10, 64)           24576     ['block_7_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_7_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_7_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_7_add (Add)           (None, 10, 10, 64)           0         ['block_6_project_BN[0][0]',  \n","                                                                     'block_7_project_BN[0][0]']  \n","                                                                                                  \n"," block_8_expand (Conv2D)     (None, 10, 10, 384)          24576     ['block_7_add[0][0]']         \n","                                                                                                  \n"," block_8_expand_BN (BatchNo  (None, 10, 10, 384)          1536      ['block_8_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_8_expand_relu (ReLU)  (None, 10, 10, 384)          0         ['block_8_expand_BN[0][0]']   \n","                                                                                                  \n"," block_8_depthwise (Depthwi  (None, 10, 10, 384)          3456      ['block_8_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_8_depthwise_BN (Batc  (None, 10, 10, 384)          1536      ['block_8_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_8_depthwise_relu (Re  (None, 10, 10, 384)          0         ['block_8_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_8_project (Conv2D)    (None, 10, 10, 64)           24576     ['block_8_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_8_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_8_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_8_add (Add)           (None, 10, 10, 64)           0         ['block_7_add[0][0]',         \n","                                                                     'block_8_project_BN[0][0]']  \n","                                                                                                  \n"," block_9_expand (Conv2D)     (None, 10, 10, 384)          24576     ['block_8_add[0][0]']         \n","                                                                                                  \n"," block_9_expand_BN (BatchNo  (None, 10, 10, 384)          1536      ['block_9_expand[0][0]']      \n"," rmalization)                                                                                     \n","                                                                                                  \n"," block_9_expand_relu (ReLU)  (None, 10, 10, 384)          0         ['block_9_expand_BN[0][0]']   \n","                                                                                                  \n"," block_9_depthwise (Depthwi  (None, 10, 10, 384)          3456      ['block_9_expand_relu[0][0]'] \n"," seConv2D)                                                                                        \n","                                                                                                  \n"," block_9_depthwise_BN (Batc  (None, 10, 10, 384)          1536      ['block_9_depthwise[0][0]']   \n"," hNormalization)                                                                                  \n","                                                                                                  \n"," block_9_depthwise_relu (Re  (None, 10, 10, 384)          0         ['block_9_depthwise_BN[0][0]']\n"," LU)                                                                                              \n","                                                                                                  \n"," block_9_project (Conv2D)    (None, 10, 10, 64)           24576     ['block_9_depthwise_relu[0][0]\n","                                                                    ']                            \n","                                                                                                  \n"," block_9_project_BN (BatchN  (None, 10, 10, 64)           256       ['block_9_project[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_9_add (Add)           (None, 10, 10, 64)           0         ['block_8_add[0][0]',         \n","                                                                     'block_9_project_BN[0][0]']  \n","                                                                                                  \n"," block_10_expand (Conv2D)    (None, 10, 10, 384)          24576     ['block_9_add[0][0]']         \n","                                                                                                  \n"," block_10_expand_BN (BatchN  (None, 10, 10, 384)          1536      ['block_10_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_10_expand_relu (ReLU  (None, 10, 10, 384)          0         ['block_10_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_10_depthwise (Depthw  (None, 10, 10, 384)          3456      ['block_10_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_10_depthwise_BN (Bat  (None, 10, 10, 384)          1536      ['block_10_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_10_depthwise_relu (R  (None, 10, 10, 384)          0         ['block_10_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_10_project (Conv2D)   (None, 10, 10, 96)           36864     ['block_10_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_10_project_BN (Batch  (None, 10, 10, 96)           384       ['block_10_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_11_expand (Conv2D)    (None, 10, 10, 576)          55296     ['block_10_project_BN[0][0]'] \n","                                                                                                  \n"," block_11_expand_BN (BatchN  (None, 10, 10, 576)          2304      ['block_11_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_11_expand_relu (ReLU  (None, 10, 10, 576)          0         ['block_11_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_11_depthwise (Depthw  (None, 10, 10, 576)          5184      ['block_11_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_11_depthwise_BN (Bat  (None, 10, 10, 576)          2304      ['block_11_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_11_depthwise_relu (R  (None, 10, 10, 576)          0         ['block_11_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_11_project (Conv2D)   (None, 10, 10, 96)           55296     ['block_11_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_11_project_BN (Batch  (None, 10, 10, 96)           384       ['block_11_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_11_add (Add)          (None, 10, 10, 96)           0         ['block_10_project_BN[0][0]', \n","                                                                     'block_11_project_BN[0][0]'] \n","                                                                                                  \n"," block_12_expand (Conv2D)    (None, 10, 10, 576)          55296     ['block_11_add[0][0]']        \n","                                                                                                  \n"," block_12_expand_BN (BatchN  (None, 10, 10, 576)          2304      ['block_12_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_12_expand_relu (ReLU  (None, 10, 10, 576)          0         ['block_12_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_12_depthwise (Depthw  (None, 10, 10, 576)          5184      ['block_12_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_12_depthwise_BN (Bat  (None, 10, 10, 576)          2304      ['block_12_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_12_depthwise_relu (R  (None, 10, 10, 576)          0         ['block_12_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_12_project (Conv2D)   (None, 10, 10, 96)           55296     ['block_12_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_12_project_BN (Batch  (None, 10, 10, 96)           384       ['block_12_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_12_add (Add)          (None, 10, 10, 96)           0         ['block_11_add[0][0]',        \n","                                                                     'block_12_project_BN[0][0]'] \n","                                                                                                  \n"," block_13_expand (Conv2D)    (None, 10, 10, 576)          55296     ['block_12_add[0][0]']        \n","                                                                                                  \n"," block_13_expand_BN (BatchN  (None, 10, 10, 576)          2304      ['block_13_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_13_expand_relu (ReLU  (None, 10, 10, 576)          0         ['block_13_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_13_pad (ZeroPadding2  (None, 11, 11, 576)          0         ['block_13_expand_relu[0][0]']\n"," D)                                                                                               \n","                                                                                                  \n"," block_13_depthwise (Depthw  (None, 5, 5, 576)            5184      ['block_13_pad[0][0]']        \n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_13_depthwise_BN (Bat  (None, 5, 5, 576)            2304      ['block_13_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_13_depthwise_relu (R  (None, 5, 5, 576)            0         ['block_13_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_13_project (Conv2D)   (None, 5, 5, 160)            92160     ['block_13_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_13_project_BN (Batch  (None, 5, 5, 160)            640       ['block_13_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_14_expand (Conv2D)    (None, 5, 5, 960)            153600    ['block_13_project_BN[0][0]'] \n","                                                                                                  \n"," block_14_expand_BN (BatchN  (None, 5, 5, 960)            3840      ['block_14_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_14_expand_relu (ReLU  (None, 5, 5, 960)            0         ['block_14_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_14_depthwise (Depthw  (None, 5, 5, 960)            8640      ['block_14_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_14_depthwise_BN (Bat  (None, 5, 5, 960)            3840      ['block_14_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_14_depthwise_relu (R  (None, 5, 5, 960)            0         ['block_14_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_14_project (Conv2D)   (None, 5, 5, 160)            153600    ['block_14_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_14_project_BN (Batch  (None, 5, 5, 160)            640       ['block_14_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_14_add (Add)          (None, 5, 5, 160)            0         ['block_13_project_BN[0][0]', \n","                                                                     'block_14_project_BN[0][0]'] \n","                                                                                                  \n"," block_15_expand (Conv2D)    (None, 5, 5, 960)            153600    ['block_14_add[0][0]']        \n","                                                                                                  \n"," block_15_expand_BN (BatchN  (None, 5, 5, 960)            3840      ['block_15_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_15_expand_relu (ReLU  (None, 5, 5, 960)            0         ['block_15_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_15_depthwise (Depthw  (None, 5, 5, 960)            8640      ['block_15_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_15_depthwise_BN (Bat  (None, 5, 5, 960)            3840      ['block_15_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_15_depthwise_relu (R  (None, 5, 5, 960)            0         ['block_15_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_15_project (Conv2D)   (None, 5, 5, 160)            153600    ['block_15_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_15_project_BN (Batch  (None, 5, 5, 160)            640       ['block_15_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," block_15_add (Add)          (None, 5, 5, 160)            0         ['block_14_add[0][0]',        \n","                                                                     'block_15_project_BN[0][0]'] \n","                                                                                                  \n"," block_16_expand (Conv2D)    (None, 5, 5, 960)            153600    ['block_15_add[0][0]']        \n","                                                                                                  \n"," block_16_expand_BN (BatchN  (None, 5, 5, 960)            3840      ['block_16_expand[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," block_16_expand_relu (ReLU  (None, 5, 5, 960)            0         ['block_16_expand_BN[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," block_16_depthwise (Depthw  (None, 5, 5, 960)            8640      ['block_16_expand_relu[0][0]']\n"," iseConv2D)                                                                                       \n","                                                                                                  \n"," block_16_depthwise_BN (Bat  (None, 5, 5, 960)            3840      ['block_16_depthwise[0][0]']  \n"," chNormalization)                                                                                 \n","                                                                                                  \n"," block_16_depthwise_relu (R  (None, 5, 5, 960)            0         ['block_16_depthwise_BN[0][0]'\n"," eLU)                                                               ]                             \n","                                                                                                  \n"," block_16_project (Conv2D)   (None, 5, 5, 320)            307200    ['block_16_depthwise_relu[0][0\n","                                                                    ]']                           \n","                                                                                                  \n"," block_16_project_BN (Batch  (None, 5, 5, 320)            1280      ['block_16_project[0][0]']    \n"," Normalization)                                                                                   \n","                                                                                                  \n"," Conv_1 (Conv2D)             (None, 5, 5, 1280)           409600    ['block_16_project_BN[0][0]'] \n","                                                                                                  \n"," Conv_1_bn (BatchNormalizat  (None, 5, 5, 1280)           5120      ['Conv_1[0][0]']              \n"," ion)                                                                                             \n","                                                                                                  \n"," out_relu (ReLU)             (None, 5, 5, 1280)           0         ['Conv_1_bn[0][0]']           \n","                                                                                                  \n","==================================================================================================\n","Total params: 2257984 (8.61 MB)\n","Trainable params: 0 (0.00 Byte)\n","Non-trainable params: 2257984 (8.61 MB)\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# 입력 이미지를 모델에 맞게 변환\n","global_average_layer = tf.keras.layers.GlobalAveragePooling2D()\n","feature_batch_average = global_average_layer(feature_batch)\n","print(feature_batch_average.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CkGekojnfyMP","executionInfo":{"status":"ok","timestamp":1720680206053,"user_tz":-540,"elapsed":4,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"5d9bce9f-5891-40dc-96e9-fdd1e0f6ef2e"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 1280)\n"]}]},{"cell_type":"code","source":["# 모델의 출력부 확인\n","prediction_layer = tf.keras.layers.Dense(10)\n","prediction_batch = prediction_layer(feature_batch_average)\n","print(prediction_batch.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mjykui7bfyya","executionInfo":{"status":"ok","timestamp":1720680214834,"user_tz":-540,"elapsed":420,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"554ee867-6a66-4a0c-cf0a-79ed010bc7b8"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["(10, 10)\n"]}]},{"cell_type":"code","source":["# 모델 생성\n","inputs = tf.keras.Input(shape=(160, 160, 3))\n","x = data_augmentation(inputs)\n","x = preprocess_input(x)\n","x = base_model(x, training=False)\n","x = global_average_layer(x)\n","x = tf.keras.layers.Dropout(0.2)(x)\n","outputs = prediction_layer(x)\n","model = tf.keras.Model(inputs, outputs)"],"metadata":{"id":"MCKuYmVTfz7g","executionInfo":{"status":"ok","timestamp":1720680299106,"user_tz":-540,"elapsed":1220,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# 모델 컴파일\n","base_learning_rate = 0.0001\n","model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","              metrics=['accuracy'])"],"metadata":{"id":"gOVLudZsf1Tl","executionInfo":{"status":"ok","timestamp":1720680348769,"user_tz":-540,"elapsed":316,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MmkN0oRvf2cV","executionInfo":{"status":"ok","timestamp":1720680415063,"user_tz":-540,"elapsed":391,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"a0905cd1-8c54-4aa5-96f2-3794e3dfd7d4"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 160, 160, 3)]     0         \n","                                                                 \n"," sequential_4 (Sequential)   (None, 160, 160, 3)       0         \n","                                                                 \n"," tf.math.truediv (TFOpLambd  (None, 160, 160, 3)       0         \n"," a)                                                              \n","                                                                 \n"," tf.math.subtract (TFOpLamb  (None, 160, 160, 3)       0         \n"," da)                                                             \n","                                                                 \n"," mobilenetv2_1.00_160 (Func  (None, 5, 5, 1280)        2257984   \n"," tional)                                                         \n","                                                                 \n"," global_average_pooling2d (  (None, 1280)              0         \n"," GlobalAveragePooling2D)                                         \n","                                                                 \n"," dropout_3 (Dropout)         (None, 1280)              0         \n","                                                                 \n"," dense_6 (Dense)             (None, 10)                12810     \n","                                                                 \n","=================================================================\n","Total params: 2270794 (8.66 MB)\n","Trainable params: 12810 (50.04 KB)\n","Non-trainable params: 2257984 (8.61 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# 모델의 학습 가능 매개변수 확인\n","len(model.trainable_variables)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B1O6-vxdgDeT","executionInfo":{"status":"ok","timestamp":1720680416008,"user_tz":-540,"elapsed":2,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"20231bf5-5fcf-48ce-de9a-745b32b34781"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["initial_epochs = 10"],"metadata":{"id":"n8uJvt-JgEvL","executionInfo":{"status":"ok","timestamp":1720681044930,"user_tz":-540,"elapsed":14,"user":{"displayName":"김효정","userId":"09608388776923805432"}}},"execution_count":67,"outputs":[]},{"cell_type":"code","source":["# 10 학습 후 결과\n","history = model.fit(train_dataset,\n","                    epochs=initial_epochs,\n","                    validation_data=test_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q-Sv6xPegFez","executionInfo":{"status":"ok","timestamp":1720681140536,"user_tz":-540,"elapsed":95618,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"b47ed6ee-2009-4822-b0d9-1fd1435c3863"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","34/34 [==============================] - 10s 273ms/step - loss: 0.0500 - accuracy: 0.9794 - val_loss: 0.0172 - val_accuracy: 1.0000\n","Epoch 2/10\n","34/34 [==============================] - 9s 254ms/step - loss: 0.0632 - accuracy: 0.9824 - val_loss: 0.0310 - val_accuracy: 0.9884\n","Epoch 3/10\n","34/34 [==============================] - 9s 235ms/step - loss: 0.0340 - accuracy: 0.9941 - val_loss: 0.0541 - val_accuracy: 0.9884\n","Epoch 4/10\n","34/34 [==============================] - 10s 261ms/step - loss: 0.0314 - accuracy: 0.9941 - val_loss: 0.0232 - val_accuracy: 0.9884\n","Epoch 5/10\n","34/34 [==============================] - 9s 262ms/step - loss: 0.0251 - accuracy: 0.9912 - val_loss: 0.0215 - val_accuracy: 0.9884\n","Epoch 6/10\n","34/34 [==============================] - 8s 215ms/step - loss: 0.0127 - accuracy: 1.0000 - val_loss: 0.0162 - val_accuracy: 0.9884\n","Epoch 7/10\n","34/34 [==============================] - 10s 270ms/step - loss: 0.0205 - accuracy: 0.9912 - val_loss: 0.0089 - val_accuracy: 1.0000\n","Epoch 8/10\n","34/34 [==============================] - 10s 264ms/step - loss: 0.0391 - accuracy: 0.9853 - val_loss: 0.0133 - val_accuracy: 1.0000\n","Epoch 9/10\n","34/34 [==============================] - 8s 213ms/step - loss: 0.0131 - accuracy: 0.9971 - val_loss: 0.0154 - val_accuracy: 0.9884\n","Epoch 10/10\n","34/34 [==============================] - 9s 240ms/step - loss: 0.0126 - accuracy: 0.9971 - val_loss: 0.0063 - val_accuracy: 1.0000\n"]}]},{"cell_type":"code","source":["acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(2, 1, 1)\n","plt.plot(acc, label='Training Accuracy')\n","plt.plot(val_acc, label='Validation Accuracy')\n","plt.legend(loc='lower right')\n","plt.ylabel('Accuracy')\n","plt.ylim([min(plt.ylim()),1])\n","plt.title('Training and Validation Accuracy')\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(loss, label='Training Loss')\n","plt.plot(val_loss, label='Validation Loss')\n","plt.legend(loc='upper right')\n","plt.ylabel('Cross Entropy')\n","plt.ylim([0, 5.0])\n","plt.title('Training and Validation Loss')\n","plt.xlabel('epoch')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":647},"id":"5nLS2nzjgGd2","executionInfo":{"status":"ok","timestamp":1720681141346,"user_tz":-540,"elapsed":827,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"10a5af12-9d32-4ec9-ac06-d4db64b14db0"},"execution_count":69,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 모델 미세 조정\n","base_model.trainable = True\n","\n","# Let's take a look to see how many layers are in the base model\n","print(\"Number of layers in the base model: \", len(base_model.layers))\n","\n","# Fine-tune from this layer onwards\n","fine_tune_at = 100\n","\n","# Freeze all the layers before the `fine_tune_at` layer\n","for layer in base_model.layers[:fine_tune_at]:\n","    layer.trainable = False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3fvItllCgHhM","executionInfo":{"status":"ok","timestamp":1720681141346,"user_tz":-540,"elapsed":25,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"550d1f24-5394-4eaf-fea2-4002c3a6d94f"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of layers in the base model:  154\n"]}]},{"cell_type":"code","source":["model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","              optimizer = tf.keras.optimizers.RMSprop(learning_rate=base_learning_rate/10),\n","              metrics=['accuracy'])\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"US3J84JBgIem","executionInfo":{"status":"ok","timestamp":1720681141346,"user_tz":-540,"elapsed":22,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"af5f8db0-b3b2-4144-8358-655bfc3cbb9d"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 160, 160, 3)]     0         \n","                                                                 \n"," sequential_4 (Sequential)   (None, 160, 160, 3)       0         \n","                                                                 \n"," tf.math.truediv (TFOpLambd  (None, 160, 160, 3)       0         \n"," a)                                                              \n","                                                                 \n"," tf.math.subtract (TFOpLamb  (None, 160, 160, 3)       0         \n"," da)                                                             \n","                                                                 \n"," mobilenetv2_1.00_160 (Func  (None, 5, 5, 1280)        2257984   \n"," tional)                                                         \n","                                                                 \n"," global_average_pooling2d (  (None, 1280)              0         \n"," GlobalAveragePooling2D)                                         \n","                                                                 \n"," dropout_3 (Dropout)         (None, 1280)              0         \n","                                                                 \n"," dense_6 (Dense)             (None, 10)                12810     \n","                                                                 \n","=================================================================\n","Total params: 2270794 (8.66 MB)\n","Trainable params: 1874250 (7.15 MB)\n","Non-trainable params: 396544 (1.51 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["len(model.trainable_variables)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_UlOeun_gJSd","executionInfo":{"status":"ok","timestamp":1720681141347,"user_tz":-540,"elapsed":17,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"9f243e2b-f5aa-4e0b-af18-80d460758876"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["56"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["fine_tune_epochs = 10\n","total_epochs =  initial_epochs + fine_tune_epochs\n","\n","history_fine = model.fit(train_dataset,\n","                         epochs=total_epochs,\n","                         initial_epoch=history.epoch[-1],\n","                         validation_data=test_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UTFAxUGogKgA","executionInfo":{"status":"ok","timestamp":1720681044100,"user_tz":-540,"elapsed":109701,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"d3ee2895-2f9d-438c-e4c9-6f02eb3681f2"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 10/20\n","34/34 [==============================] - 18s 271ms/step - loss: 0.1040 - accuracy: 0.9765 - val_loss: 0.1381 - val_accuracy: 0.9767\n","Epoch 11/20\n","34/34 [==============================] - 8s 211ms/step - loss: 0.0758 - accuracy: 0.9765 - val_loss: 0.0379 - val_accuracy: 0.9884\n","Epoch 12/20\n","34/34 [==============================] - 10s 263ms/step - loss: 0.0628 - accuracy: 0.9882 - val_loss: 0.0337 - val_accuracy: 0.9884\n","Epoch 13/20\n","34/34 [==============================] - 11s 299ms/step - loss: 0.0373 - accuracy: 0.9912 - val_loss: 0.0262 - val_accuracy: 1.0000\n","Epoch 14/20\n","34/34 [==============================] - 8s 213ms/step - loss: 0.0646 - accuracy: 0.9824 - val_loss: 0.0312 - val_accuracy: 1.0000\n","Epoch 15/20\n","34/34 [==============================] - 10s 268ms/step - loss: 0.0391 - accuracy: 0.9853 - val_loss: 0.0496 - val_accuracy: 0.9884\n","Epoch 16/20\n","34/34 [==============================] - 9s 236ms/step - loss: 0.0464 - accuracy: 0.9853 - val_loss: 0.0815 - val_accuracy: 0.9884\n","Epoch 17/20\n","34/34 [==============================] - 9s 221ms/step - loss: 0.0394 - accuracy: 0.9882 - val_loss: 0.0557 - val_accuracy: 0.9767\n","Epoch 18/20\n","34/34 [==============================] - 10s 270ms/step - loss: 0.0234 - accuracy: 0.9941 - val_loss: 0.0294 - val_accuracy: 1.0000\n","Epoch 19/20\n","34/34 [==============================] - 9s 255ms/step - loss: 0.0314 - accuracy: 0.9853 - val_loss: 0.0135 - val_accuracy: 1.0000\n","Epoch 20/20\n","34/34 [==============================] - 8s 212ms/step - loss: 0.0464 - accuracy: 0.9882 - val_loss: 0.0574 - val_accuracy: 0.9767\n"]}]},{"cell_type":"code","source":["acc += history_fine.history['accuracy']\n","val_acc += history_fine.history['val_accuracy']\n","\n","loss += history_fine.history['loss']\n","val_loss += history_fine.history['val_loss']\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(2, 1, 1)\n","plt.plot(acc, label='Training Accuracy')\n","plt.plot(val_acc, label='Validation Accuracy')\n","plt.ylim([0, 1])\n","plt.plot([initial_epochs-1,initial_epochs-1],\n","          plt.ylim(), label='Start Fine Tuning')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(loss, label='Training Loss')\n","plt.plot(val_loss, label='Validation Loss')\n","plt.ylim([0, 5.0])\n","plt.plot([initial_epochs-1,initial_epochs-1],\n","         plt.ylim(), label='Start Fine Tuning')\n","plt.legend(loc='upper right')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('epoch')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":690},"id":"CspzQMEPgNRI","executionInfo":{"status":"ok","timestamp":1720681044929,"user_tz":-540,"elapsed":850,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"741d47be-5fec-47f9-afae-402ec8cd9bb4"},"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 모델 미세 조정\n","base_model.trainable = True\n","\n","# Let's take a look to see how many layers are in the base model\n","print(\"Number of layers in the base model: \", len(base_model.layers))\n","\n","# Fine-tune from this layer onwards\n","fine_tune_at = 100\n","\n","# Freeze all the layers before the `fine_tune_at` layer\n","for layer in base_model.layers[:fine_tune_at]:\n","    layer.trainable = False"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eyGtHPyriQf4","executionInfo":{"status":"ok","timestamp":1720681141347,"user_tz":-540,"elapsed":15,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"97a538a8-94f7-410f-b4bd-1b947d4420ef"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of layers in the base model:  154\n"]}]},{"cell_type":"code","source":["model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","              optimizer = tf.keras.optimizers.RMSprop(learning_rate=base_learning_rate/10),\n","              metrics=['accuracy'])\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"44KC2LSSiRf4","executionInfo":{"status":"ok","timestamp":1720681141347,"user_tz":-540,"elapsed":14,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"a1f10678-ed36-4775-b77d-9fdde25482bb"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 160, 160, 3)]     0         \n","                                                                 \n"," sequential_4 (Sequential)   (None, 160, 160, 3)       0         \n","                                                                 \n"," tf.math.truediv (TFOpLambd  (None, 160, 160, 3)       0         \n"," a)                                                              \n","                                                                 \n"," tf.math.subtract (TFOpLamb  (None, 160, 160, 3)       0         \n"," da)                                                             \n","                                                                 \n"," mobilenetv2_1.00_160 (Func  (None, 5, 5, 1280)        2257984   \n"," tional)                                                         \n","                                                                 \n"," global_average_pooling2d (  (None, 1280)              0         \n"," GlobalAveragePooling2D)                                         \n","                                                                 \n"," dropout_3 (Dropout)         (None, 1280)              0         \n","                                                                 \n"," dense_6 (Dense)             (None, 10)                12810     \n","                                                                 \n","=================================================================\n","Total params: 2270794 (8.66 MB)\n","Trainable params: 1874250 (7.15 MB)\n","Non-trainable params: 396544 (1.51 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["len(model.trainable_variables)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"avlzHhgAiStf","executionInfo":{"status":"ok","timestamp":1720681141347,"user_tz":-540,"elapsed":9,"user":{"displayName":"김효정","userId":"09608388776923805432"}},"outputId":"7ae0fd22-9dba-4f4d-b0d5-fc075a3a5a39"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["56"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["fine_tune_epochs = 10\n","total_epochs =  initial_epochs + fine_tune_epochs\n","\n","history_fine = model.fit(train_dataset,\n","                         epochs=total_epochs,\n","                         initial_epoch=history.epoch[-1],\n","                         validation_data=test_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eZrkSDfCiUT8","outputId":"58a6e51b-7e5a-4ca5-805b-e7c68e171634"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 10/20\n","34/34 [==============================] - 16s 228ms/step - loss: 0.0168 - accuracy: 0.9971 - val_loss: 0.0083 - val_accuracy: 1.0000\n","Epoch 11/20\n","34/34 [==============================] - 10s 247ms/step - loss: 0.0150 - accuracy: 0.9941 - val_loss: 0.0087 - val_accuracy: 1.0000\n","Epoch 12/20\n","34/34 [==============================] - 10s 265ms/step - loss: 0.0178 - accuracy: 0.9912 - val_loss: 0.0048 - val_accuracy: 1.0000\n","Epoch 13/20\n","34/34 [==============================] - 8s 214ms/step - loss: 0.0066 - accuracy: 1.0000 - val_loss: 0.0028 - val_accuracy: 1.0000\n","Epoch 14/20\n","34/34 [==============================] - 10s 263ms/step - loss: 0.0126 - accuracy: 0.9941 - val_loss: 0.0077 - val_accuracy: 1.0000\n","Epoch 15/20\n","34/34 [==============================] - 9s 262ms/step - loss: 0.0086 - accuracy: 0.9971 - val_loss: 0.0110 - val_accuracy: 1.0000\n","Epoch 16/20\n","34/34 [==============================] - 8s 209ms/step - loss: 0.0046 - accuracy: 1.0000 - val_loss: 0.0029 - val_accuracy: 1.0000\n","Epoch 17/20\n","34/34 [==============================] - 10s 264ms/step - loss: 0.0312 - accuracy: 0.9971 - val_loss: 0.0145 - val_accuracy: 0.9884\n","Epoch 18/20\n","34/34 [==============================] - ETA: 0s - loss: 0.0132 - accuracy: 0.9971"]}]},{"cell_type":"code","source":["acc += history_fine.history['accuracy']\n","val_acc += history_fine.history['val_accuracy']\n","\n","loss += history_fine.history['loss']\n","val_loss += history_fine.history['val_loss']\n","\n","plt.figure(figsize=(8, 8))\n","plt.subplot(2, 1, 1)\n","plt.plot(acc, label='Training Accuracy')\n","plt.plot(val_acc, label='Validation Accuracy')\n","plt.ylim([0, 1])\n","plt.plot([initial_epochs-1,initial_epochs-1],\n","          plt.ylim(), label='Start Fine Tuning')\n","plt.legend(loc='lower right')\n","plt.title('Training and Validation Accuracy')\n","\n","plt.subplot(2, 1, 2)\n","plt.plot(loss, label='Training Loss')\n","plt.plot(val_loss, label='Validation Loss')\n","plt.ylim([0, 5.0])\n","plt.plot([initial_epochs-1,initial_epochs-1],\n","         plt.ylim(), label='Start Fine Tuning')\n","plt.legend(loc='upper right')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('epoch')\n","plt.show()"],"metadata":{"id":"oZyk-Sq0iVgl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss, accuracy = model.evaluate(train_dataset)\n","print('Train accuracy :', accuracy)\n","\n","loss, accuracy = model.evaluate(test_dataset)\n","print('Test accuracy :', accuracy)"],"metadata":{"id":"oNOs08yjiXL4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Retrieve a batch of images from the test set\n","image_batch, label_batch = test_dataset.as_numpy_iterator().next()\n","predictions = model.predict(image_batch)\n","\n","label = predictions.argmax(axis=1)\n","\n","plt.figure(figsize=(10, 10))\n","for i in range(9):\n","    ax = plt.subplot(3, 3, i + 1)\n","    plt.imshow(image_batch[i].astype(\"uint8\"))\n","    plt.title(label[i])\n","    plt.axis(\"off\")"],"metadata":{"id":"G2f_-TqkiYBC"},"execution_count":null,"outputs":[]}]}